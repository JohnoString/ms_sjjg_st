//LRU的实现 LRU是Least Recently Used的缩写，即最近最少使用，是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰

// 利用双向链表实现

// 双向链表有一个特点就是它的链表是双路的，我们定义好头节点和尾节点，然后利用先进先出（FIFO），最近被放入的数据会最早被获取。
// 其中主要涉及到添加、访问、修改、删除操作。首先是添加，如果是新元素，直接放在链表头上面，其他的元素顺序往下移动；访问的话，
// 在头节点的可以不用管，如果是在中间位置或者尾巴，就要将数据移动到头节点；修改操作也一样，修改原值之后，再将数据移动到头部；
// 删除的话，直接删除，其他元素顺序移动；


// 标准的lru算法实现都是 hashmap+双向链表

// 维护多个lru缓存，将数据大致均匀的映射到这n个 lru缓存中，主要是为了缓解 吊销缓存数据、添加数据等写操作的竞争。
// 维护的lru缓存个数 = CPU的核心数。
#if 0
#include <iostream>

int main()
{
	return 0;
}
#endif